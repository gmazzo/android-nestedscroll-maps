apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1
        versionName "$version"
    }
}

def repoDesc = 'Nested scroll (CoordinatorLayout, AppBarLayout and CollapsingToolbarLayout) support for Google Maps fragments'
def repoName = 'android-nestedscroll-maps'
def repoUrl = "https://github.com/gmazzo/$repoName"
def repoTags = ['aar', 'android', 'nested-scroll', 'scroll', 'design', 'appcompat', 'maps', 'google' ]

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = repoName
        desc = repoDesc
        vcsUrl = "${repoUrl}.git"
        githubRepo = repoUrl.replaceFirst('\\Qhttps://github.com/\\E', '');
        githubReleaseNotesFile = 'README.md'
        licenses = ['Public Domain']
        labels = repoTags
        publicDownloadNumbers = true
    }
}

dependencies {
    compile 'com.google.android.gms:play-services-maps:9.4.0'
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name repoDesc
                url repoUrl
            }
        }
    }
}

android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        task sourcesJar(type: Jar, dependsOn: "assemble${variant.name.capitalize()}") {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task javadoc(type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {
            source = files(variant.javaCompile.source)
            classpath += files(android.getBootClasspath(), variant.javaCompile.classpath)
            failOnError = false
            exclude '**/R.java', '**/BuildConfig.java'
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives javadocJar
            archives sourcesJar
        }
    }
}
